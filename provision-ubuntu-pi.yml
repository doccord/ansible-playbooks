---
# This is ran to setup network booting for the pi
- name: Provision Pi for Network Booting
  hosts: all
  become: true
  roles:
    - role: common
  tasks:
  - ansible.builtin.debug:
      msg: "{{ ansible_facts }}"
  - name: Extract additional information into facts
    set_fact:
      iscsi_initiator_iqn: "{{ common__iscsi_initiator_iqn_base }}:{{ ansible_hostname }}"
      iscsi_target_iqn: "{{ common__iscsi_target_iqn_base }}:{{ ansible_hostname }}"
      mnt_firmware: "{{ '/mnt/' + ansible_hostname + '-firmware' }}"
      mnt_iscsi: "{{ '/mnt/' + ansible_hostname + '-iscsi' }}"
      nfs_tftp_server_path: "{{ '/mnt/rust0/tftp/' + ansible_default_ipv4['macaddress'] | replace(':', '-') }}"
      rootfs_partlabel: "{{ ansible_hostname + '-rootfs' }}"
  
  # Setup firmware
  - name: Install rpi-eeprom files
    package:
       name: rpi-eeprom
       state: latest
    when: ansible_architecture == "aarch64"
  - name: Create temporary directory for scratch space
    tempfile:
      state: directory
      suffix: firmware-update
    register: eeprom_firmware_dir
    when: ansible_architecture == "aarch64"
  - name: Extract additional information into facts
    set_fact:
      pi_pieeprom_file: /lib/firmware/raspberrypi/bootloader/stable/pieeprom-2020-04-16.bin
    when: ansible_architecture == "aarch64"
  - name: Extract config from eeprom firmware
    shell:
      chdir: "{{ eeprom_firmware_dir.path }}"
      cmd: "{{ 'rpi-eeprom-config ' + pi_pieeprom_file + ' > bootconf.txt' }}"
    when: ansible_architecture == "aarch64"
  - name: Set BOOT_ORDER to load from SD card, and then netboot
    lineinfile:
      insertbefore: "none"
      line: BOOT_ORDER=0xe21
      path: "{{ eeprom_firmware_dir.path + '/bootconf.txt' }}"
      regex: BOOT_ORDER
      state: present
    when: ansible_architecture == "aarch64"
  - name: Set TFTP_PREFIX to use mac address
    lineinfile:
      insertbefore: "none"
      line: TFTP_PREFIX=2
      path: "{{ eeprom_firmware_dir.path + '/bootconf.txt' }}"
      regex: TFTP_PREFIX
      state: present
    when: ansible_architecture == "aarch64"
  - name: Set TFTP_IP to common__nfs_server_ip
    lineinfile:
      insertbefore: "none"
      line: "{{ 'TFTP_IP=' + common__nfs_server_ip }}"
      path: "{{ eeprom_firmware_dir.path + '/bootconf.txt' }}"
      regex: TFTP_IP
      state: present
    when: ansible_architecture == "aarch64"
  - name: Set CLIENT_IP
    lineinfile:
      insertbefore: "none"
      line: "{{ 'CLIENT_IP=' + ansible_default_ipv4['address'] }}"
      path: "{{ eeprom_firmware_dir.path + '/bootconf.txt' }}"
      regex: CLIENT_IP
      state: present
    when: ansible_architecture == "aarch64"
  - name: Set GATEWAY
    lineinfile:
      insertbefore: "none"
      line: "{{ 'GATEWAY=' + ansible_default_ipv4['gateway'] }}"
      path: "{{ eeprom_firmware_dir.path + '/bootconf.txt' }}"
      regex: GATEWAY
      state: present
    when: ansible_architecture == "aarch64"
  - name: Set SUBNET
    lineinfile:
      insertbefore: "none"
      line: "{{ 'SUBNET=' + ansible_default_ipv4['netmask'] }}"
      path: "{{ eeprom_firmware_dir.path + '/bootconf.txt' }}"
      regex: SUBNET
      state: present
    when: ansible_architecture == "aarch64"
  - name: Disable firmware self-update
    lineinfile:
      insertbefore: "none"
      line: ENABLE_SELF_UPDATE=0
      path: "{{ eeprom_firmware_dir.path + '/bootconf.txt' }}"
      regex: ENABLE_SELF_UPDATE
      state: present
    when: ansible_architecture == "aarch64"
  - name: Write new config out to new pieeprom.bin
    shell:
      chdir: "{{ eeprom_firmware_dir.path }}"
      cmd: "{{ 'rpi-eeprom-config --out pieeprom.bin --config bootconf.txt ' + pi_pieeprom_file }}"
    when: ansible_architecture == "aarch64"
  - name: Update to new pieeprom.bin
    shell:
      chdir: "{{ eeprom_firmware_dir.path }}"
      cmd: rpi-eeprom-update -d -f pieeprom.bin
    when: ansible_architecture == "aarch64"
  - name: Reboot the server to apply new firmware
    reboot:
    when: ansible_architecture == "aarch64"
  - name: Remove rpi-eeprom files
    package:
       name: rpi-eeprom
       state: absent
    when: ansible_architecture == "aarch64"

  # Booting setup
  - name: Dislable cloud-init
    file:
      path: /etc/cloud/cloud-init.disabled
      state: touch
  - name: Update initramfs
    shell:
      cmd: update-initramfs -u

  # ISCSI Setup
  - name: Setup /etc/iscsi/iscsi.initramfs
    ansible.builtin.copy:
      dest: "/etc/iscsi/iscsi.initramfs"
      content: |
        ISCSI_INITIATOR={{ iscsi_initiator_iqn }}
        ISCSI_TARGET={{ iscsi_target_iqn }}
        ISCSI_TARGET_IP={{ common__iscsi_target_ip }}
      mode: "u=rw"
      owner: "root"
      group: "root"
  - name: Setup /etc/iscsi/initiatorname.iscsi
    ansible.builtin.copy:
      dest: "/etc/iscsi/initiatorname.iscsi"
      content: "InitiatorName={{ iscsi_initiator_iqn }}"
      mode: "u=rw"
      owner: "root"
      group: "root"

  # Setup new rootfs
  - name: Login to iscsi device for new rootfs
    community.general.open_iscsi:
      auto_node_startup: no
      discover: yes
      login: yes
      portal: "{{ common__iscsi_target_ip }}"
      target: "{{ iscsi_target_iqn }}"
  - name: Setup new rootfs disk
    community.general.parted:
      device: /dev/sda
      fs_type: ext4
      flags: [ lvm ]
      label: gpt
      name: "{{ rootfs_partlabel }}"
      number: 1
      state: present
  - name: Create new rootfs filesystem
    community.general.filesystem:
      dev: /dev/sda1
      force: yes
      fstype: ext4
  - name: Mount new rootfs folder
    ansible.posix.mount:
      fstype: ext4
      path: "{{ mnt_iscsi }}"
      src: /dev/sda1
      state: mounted
  - name: Rsync local filesystem to new rootfs
    ansible.posix.synchronize:
      archive: yes
      compress: no
      dest: "{{ mnt_iscsi }}"
      src: /
      rsync_opts:
        - "--exclude=/boot/firmware"
        - "--exclude=/dev/*"
        - "--exclude=/lost+found"
        - "--exclude=/media/*"
        - "--exclude=/mnt/*"
        - "--exclude=/proc/*"
        - "--exclude=/run/*"
        - "--exclude=/sys/*"
        - "--exclude=/tmp/*"
    delegate_to: "{{ inventory_hostname }}"
  - name: Setup new rootfs /etc/fstab - rootfs
    ansible.posix.mount:
      fstab: "{{ mnt_iscsi + '/etc/fstab' }}"
      fstype: ext4
      opts: _netdev,noatime
      passno: "1"
      path: /
      src: "{{ 'PARTLABEL=' + rootfs_partlabel }}"
      state: present
  - name: Setup new rootfs /etc/fstab - boot
    ansible.posix.mount:
      fstab: "{{ mnt_iscsi + '/etc/fstab' }}"
      fstype: nfs
      opts: defaults,vers=4.1,proto=tcp
      passno: "0"
      path: /boot/firmware
      src: "{{ common__nfs_server_ip + ':' + nfs_tftp_server_path }}"
      state: present
  - name: Setup new rootfs /etc/fstab - remove iscsi mount
    ansible.posix.mount:
      fstab: "{{ mnt_iscsi + '/etc/fstab' }}"
      path: "{{ mnt_iscsi }}"
      state: absent
  - name: Unmount new rootfs folder
    ansible.posix.mount:
      path: "{{ mnt_iscsi }}"
      state: absent
  - name: Disconnect from iscsi device
    community.general.open_iscsi:
      login: no
      target: "{{ iscsi_target_iqn }}"

  # Setup netboot fs
  - name: "Mount tftp folder {{ common__nfs_server_ip + ':' + nfs_tftp_server_path }}"
    ansible.posix.mount:
      fstype: nfs
      path: "{{ mnt_firmware }}"
      src: "{{ common__nfs_server_ip + ':' + nfs_tftp_server_path }}"
      state: mounted
  - name: Rsync /boot/firmware to tftp folder
    ansible.posix.synchronize:
      archive: yes
      compress: no
      delete: yes
      dest: "{{ mnt_firmware }}"
      src: /boot/firmware/
    delegate_to: "{{ inventory_hostname }}"
  - name: Compute cmdline data
    set_fact:
      cmdline_ip: "{{ ansible_default_ipv4['address'] + '::' + ansible_default_ipv4['gateway'] + ':' + ansible_default_ipv4['netmask'] + ':' + ansible_hostname + ':eth0:static' }}"
  - name: Update cmdline.txt filesystem info
    replace:
      path: "{{ mnt_firmware + '/cmdline.txt' }}"
      regexp: "root=[=a-zA-Z0-9]+ (.*)$"
      replace: "{{ 'root=PARTLABEL=' + rootfs_partlabel + ' \\1' }}"
  - name: Update cmdline.txt ip info
    lineinfile:
      backrefs: yes
      line: "{{ '\\1 ip=' + cmdline_ip }}"
      path: "{{ mnt_firmware + '/cmdline.txt' }}"
      regexp: "^(.*)$"
  - name: Update cmdline.txt iscsi info
    lineinfile:
      backrefs: yes
      line: "{{ '\\1 ISCSI_INITIATOR=' + iscsi_initiator_iqn + ' ISCSI_TARGET_NAME=' + iscsi_target_iqn + ' ISCSI_TARGET_IP=' + common__iscsi_target_ip + ' rw' }}"
      path: "{{ mnt_firmware + '/cmdline.txt' }}"
      regexp: "^(.*)$"
  - name: Update cmdline.txt to disable cloud-init
    lineinfile:
      backrefs: yes
      line: "{{ '\\1 cloud-init=disabled' }}"
      path: "{{ mnt_firmware + '/cmdline.txt' }}"
      regexp: "^(.*)$"
  # By name, this should be compressed, but it doesn't seem to be.
  # https://eugenegrechko.com/blog/USB-Boot-Ubuntu-Server-20.04-on-Raspberry-Pi-4
  - name: Set kernel to non-gzipped vmlinuz
    lineinfile:
      line: "kernel=vmlinuz"
      path: "{{ mnt_firmware + '/usercfg.txt' }}"
      state: present
  - name: Set initramfs
    lineinfile:
      line: "initramfs initrd.img followkernel"
      path: "{{ mnt_firmware + '/usercfg.txt' }}"
      state: present
  - name: Unmount tftp folder
    ansible.posix.mount:
      path: "{{ mnt_firmware }}"
      state: absent