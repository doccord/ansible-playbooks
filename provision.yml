---
- hosts: all
  become: true
  roles:
    - role: common
  tasks:
    # Pi-specific mounts for /home and /var to preserve SD card life
    - name: Discover iscsi nodes on the portal
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      community.general.open_iscsi:
        discover: yes
        portal: "{{ common__iscsi_target_ip }}"
        show_nodes: yes
      register: iscsi_discover
    - when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      ansible.builtin.assert:
        that: "not iscsi_discover.failed"
        fail_msg: "Unable to discover nodes on {{ common__iscsi_target_ip }}!"
        quiet: yes
    - name: "Check that {{ common__iscsi_target_iqn_base }}:{{ ansible_hostname }}-home is available"
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      ansible.builtin.assert:
        that: "'{{ common__iscsi_target_iqn_base }}:{{ ansible_hostname }}-home' in {{ iscsi_discover.nodes }}"
        fail_msg: "{{ common__iscsi_target_iqn_base }}:{{ ansible_hostname }}-home not available to connect to on {{ common__iscsi_target_ip }}"
        success_msg: "{{ common__iscsi_target_iqn_base }}:{{ ansible_hostname }}-home available"
        quiet: yes
    - name: "Check that {{ common__iscsi_target_iqn_base }}:{{ ansible_hostname }}-var is available"
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      ansible.builtin.assert:
        that: "'{{ common__iscsi_target_iqn_base }}:{{ ansible_hostname }}-var' in {{ iscsi_discover.nodes }}"
        fail_msg: "{{ common__iscsi_target_iqn_base }}:{{ ansible_hostname }}-var not available to connect to on {{ common__iscsi_target_ip }}"
        quiet: yes

    - name: Connect to iscsi-based /home
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      community.general.open_iscsi:
        auto_node_startup: yes
        login: yes
        portal: "{{ common__iscsi_target_ip }}"
        target: "{{ common__iscsi_target_iqn_base }}:{{ ansible_hostname }}-home"
      register: iscsi_connect
    - name: Setup new disk for /home
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      community.general.parted:
        device: "{{ iscsi_connect.devicenodes | first }}"
        fs_type: "ext4"
        flags: [ "lvm" ]
        label: "gpt"
        name: "{{ ansible_hostname }}-home"
        number: 1
        state: "present"
    - name: Create new filesystem for /home
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      community.general.filesystem:
        dev: "{{ iscsi_connect.devicenodes | first }}"
        fstype: "ext4"
    - name: Temporarily mount new /home folder in /mnt/home
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      ansible.posix.mount:
        fstype: "ext4"
        path: "/mnt/home"
        src: "{{ iscsi_connect.devicenodes | first }}"
        state: "mounted"
    - name: Rsync current /home to new /home
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      delegate_to: "{{ inventory_hostname }}"
      ansible.posix.synchronize:
        archive: yes
        compress: no
        dest: "/mnt/home"
        src: "/home"
    - name: Remove temporary mount /mnt/home
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      ansible.posix.mount:
        path: "/mnt/home"
        state: "absent"
    - name: Add new /home to fstab to automatically mount it.
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      ansible.posix.mount:
        fstype: "ext4"
        opts: "_netdev"
        passno: "1"
        path: "/home"
        src: "PARTLABEL={{ ansible_hostname }}-home"
        state: "present"

    - name: Connect to iscsi-based /var
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      community.general.open_iscsi:
        auto_node_startup: yes
        login: yes
        portal: "{{ common__iscsi_target_ip }}"
        target: "{{ common__iscsi_target_iqn_base }}:{{ ansible_hostname }}-var"
      register: iscsi_connect
    - name: Setup new disk for /var
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      community.general.parted:
        device: "{{ iscsi_connect.devicenodes | first }}"
        fs_type: "ext4"
        flags: [ "lvm" ]
        label: "gpt"
        name: "{{ ansible_hostname }}-var"
        number: 1
        state: "present"
    - name: Create new filesystem for /var
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      community.general.filesystem:
        dev: "{{ iscsi_connect.devicenodes | first }}"
        fstype: "ext4"
    - name: Temporarily mount new /var folder in /mnt/var
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      ansible.posix.mount:
        fstype: "ext4"
        path: "/mnt/var"
        src: "{{ iscsi_connect.devicenodes | first }}"
        state: "mounted"
    - name: Rsync current /var to new /var
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      delegate_to: "{{ inventory_hostname }}"
      ansible.posix.synchronize:
        archive: yes
        compress: no
        dest: "/mnt/var"
        src: "/var"
    - name: Remove temporary mount /mnt/var
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      ansible.posix.mount:
        path: "/mnt/var"
        state: "absent"
    - name: Add new /var to fstab to automatically mount it.
      when: ansible_local.rpi.is and ansible_local.rpi.version == '4'
      ansible.posix.mount:
        fstype: "ext4"
        opts: "_netdev"
        passno: "1"
        path: "/var"
        src: "PARTLABEL={{ ansible_hostname }}-var"
        state: "present"
